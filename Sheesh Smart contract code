  
    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {
      allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
      return true;
    }
  
    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {
      uint oldValue = allowed[msg.sender][_spender];
      if (_subtractedValue > oldValue) {
        allowed[msg.sender][_spender] = 0;
      } else {
        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);
      }
      emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);
      return true;
    }
    
  
  
    function _blackList(address _address, bool _isBlackListed) internal returns (bool) {
    require(tokenBlacklist[_address] != _isBlackListed);
    tokenBlacklist[_address] = _isBlackListed;
    emit Blacklist(_address, _isBlackListed);
    return true;
    }
  
  
  
  }
  
  contract PausableToken is StandardToken, Pausable {
  
    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {
      return super.transfer(_to, _value);
    }
  
    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {
      return super.transferFrom(_from, _to, _value);
    }
  
    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {
      return super.approve(_spender, _value);
    }
  
    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {
      return super.increaseApproval(_spender, _addedValue);
    }
  
    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {
      return super.decreaseApproval(_spender, _subtractedValue);
    }
    
    function blackListAddress(address listAddress,  bool isBlackListed) public whenNotPaused onlyOwner  returns (bool success) {
    return super._blackList(listAddress, isBlackListed);
    }
    
  }
  
  contract CoinToken is PausableToken {
      string public name;
      string public symbol;
      uint public decimals;
      event Mint(address indexed from, address indexed to, uint256 value);
      event Burn(address indexed burner, uint256 value);
  
    
      constructor(string memory _name, string memory _symbol, uint256 _decimals, uint256 _supply, address tokenOwner) public {
          name = _name;
          symbol = _symbol;
          decimals = _decimals;
          totalSupply = _supply * 10**_decimals;
          balances[tokenOwner] = totalSupply;
          owner = tokenOwner;
          emit Transfer(address(0), tokenOwner, totalSupply);
      }
    
    function burn(uint256 _value) public {
      _burn(msg.sender, _value);
    }
  
    function _burn(address _who, uint256 _value) internal {
      require(_value <= balances[_who]);
      balances[_who] = balances[_who].sub(_value);
      totalSupply = totalSupply.sub(_value);
      emit Burn(_who, _value);
      emit Transfer(_who, address(0), _value);
    }
  
      function mint(address account, uint256 amount) onlyOwner public {
  
          totalSupply = totalSupply.add(amount);
          balances[account] = balances[account].add(amount);
          emit Mint(address(0), account, amount);
          emit Transfer(address(0), account, amount);
      }
  
      
  }
